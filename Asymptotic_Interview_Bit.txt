1. What is the time, space complexity of following code :

    int a = 0, b = 0;    
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            a = a + j;
        }
    }
    for (k = 0; k < N; k++) {
        b = b + k;
    } 


 Answer: O(N * N) time, O(1) space
Notice how the nested loop behaves. The j loop iterates for N times and the j loop itself is run N times.
So, the total number of runs would be N + N + …. N times
The first set of nested loops is O(N^2) and the second loop is O(N). 
This is O(max(N^2,N)) which is O(N^2). 

2. 
What is the worst case time complexity of the following code:

int findMinPath(vector<vector<int> > &V, int r, int c) {
  int R = V.size();
  int C = V[0].size();
  if (r >= R || c >= C) return 100000000; // Infinity
  if (r == R - 1 && c == C - 1) return 0;
  return V[r][c] + min(findMinPath(V, r + 1, c), findMinPath(V, r, c + 1));
}
Assume R = V.size() and C = V[0].size().


 Answer: O(2^(R + C))
Explanation:
Note that in every function call, we end up making 2 calls.

So, the function calls ends up looking like a tree :

                   F(0,0)
                /          \ 
            F(0, 1)         F(1, 0)
             /    \         /       \ 
          F(0, 2)  F(1,1)  F(1, 1)  F(2, 0)
             ....
The function calls end up making a complete binary tree.

  Number of calls on Level 0 = 1
  Number of calls on Level 1 = 2
  Number of calls on Level 2 = 4
  ...
  Number of calls on level i = 2^i. 
Total number of calls = 1 + 2 + 4 + ... 2^i + ... 2^(M + N - 2)  
                      = O(2^(M + N))



3. 
What is the worst case time complexity of the following code:

int memo[101][101];
int findMinPath(vector<vector<int> >& V, int r, int c) {
  int R = V.size();
  int C = V[0].size();
  if (r >= R || c >= C) return 100000000; // Infinity
  if (r == R - 1 && c == C - 1) return 0;
  if (memo[r][c] != -1) return memo[r][c];
  memo[r][c] =  V[r][c] + min(findMinPath(V, r + 1, c), findMinPath(V, r, c + 1));
  return memo[r][c];
}

Callsite : 
memset(memo, -1, sizeof(memo));
findMinPath(V, 0, 0);
Assume R = V.size() and C = V[0].size() and V has positive elements


Ans;
O(R*C)
Explanation:
Note that for a given `(r, c)`
 
the following code will not be executed more than once : 

memo[r][c] = V[r][c] + min(findMinPath(V, r + 1, c), findMinPath(V, r, c + 1));


Once memo[r][c] is set, the functions will return at 

if (memo[r][c] != -1) return memo[r][c];


So, every function ends up calling other functions at most 1 time. 
In other words, every function ends up executing atmost O(1) times (Note that you can shift the part about checking for memo[r][c] != -1 at the callsite ).

`O(R * C)` possible number of combinations are possible for `(r, c)`
Hence, the time complexity of the function : O(R*C)


4.
What is time complexity of following code :

        int count = 0;
        for (int i = N; i > 0; i /= 2) {
            for (int j = 0; j < i; j++) {
                count += 1;
            }
        }

Ans: O(N)
Explanation:In the first iteration, the j loop runs N times.

In the second iteration, the j loop runs N / 2 times. 

In the ith iteration, the j loop runs N / 2^i times. 

So, the total number of runs of loop = N + N / 2 + N / 4 + ... 1 

= **N * ( 1 + 1/2 + 1/4 + 1/8 + ... ) < 2 * N** 


5.
What is the time complexity of the following code :

    int i, j, k = 0;
    for (i  = n/2; i <= n; i++) {
        for (j = 2; j <= n; j = j * 2) {
            k = k + n/2;
        }
    }


Ans: O(nLogn)
Explanation:
Lets look at the code we are evaluating : 

int i, j, k = 0;
for (i = n/2; i <= n; i++) {
for (j = 2; j <= n; j = j * 2) {
k = k + n/2;
}
}


Now, lets just assume `n = 8` for now. 
We will try to see, the values of j corresponding to each i. 

i = 4, j = 2, 4, 8
i = 5, j = 2, 4, 8
i = 6, j = 2, 4, 8
i = 7, j = 2, 4, 8
i = 8, j = 2, 4, 8


If you notice, j keeps doubling till it is less than or equal to n. Number of times, you can double a number till it is less than n would be log(n). 

Lets take more examples here to convince ourselves.

n = 16, j = 2, 4, 8, 16
n = 32, j = 2, 4, 8, 16, 32


So, j would run for O(log n) steps. 
i runs for n/2 steps. 

So, total steps ` = O (n/ 2 * log (n)) = O(n logn) `

6.
In the following C++ function, let n >= m.

    int gcd(int n, int m) {
            if (n%m ==0) return m;
            if (n < m) swap(n, m);
            while (m > 0) {
                n = n%m;
                swap(n, m);
            }
            return n;
    }
What is the time complexity of the above function assuming n > m?

Ans: Θ(logn)
Explanation:
Let us say n = fibonacci(N) and m = fibonacci(N - 1)

fibonacci(N) = fibonacci(N-1) + fibonacci(N-2)

OR n = m + k where k < m. 

Therefore the step 

    n = n % m will make n = k
    
    swap(n, m) will result in
    
    n = fibonacci(N-1)
        
    m = k = fibonacci(N-2)
    
So, it will take N steps before m becomes 0.

This means, in the worst case, this algorithm can take N step if **n** is Nth fibonacci number. 

**Think of whats the relation between N and n**. 

7.
Which of the following is not bounded by O(n^2)?

Ans:n^3 / (sqrt(n))
Expla:The order of growth of option (C) is n^2.5 which is higher than n^2.

Lets look at it with a different approach :

f(n) = O(n^2) if
f(n) <= C * n^2 for n > n0.


Lets look at every option one by one.

* Option 1 :

(15^10) * n + 12099
Lets say C = 16^10
15^10 * n + 12099 < 16^10 * n^2 for n > 1.
So, it is O(n^2).


* Option 2 : n^1.98

C = 1.
    n^1.98 < n^2 for n > 1.
So, its O(n^2) ```
Option 3 : n^3 / (sqrt(n)) or n^2.5
    There is no possible combination of C and n0 possible
Option 4 : 2^20 * n
    C = 2^20, n0 = 1
        2^20 * n <= 2^20 * n^2 for n > 1
```

8.
Which of the given options provides the increasing order of complexity of functions f1, f2, f3 and f4:

f1(n) = 2^n

f2(n) = n^(3/2)

f3(n) = nLogn

f4(n) = n^(Logn)

Ans: f3, f2, f4, f1
Explanation:Try to look at the values for functions for very large value of n.
